###############################################################################
Exercice 7 : manipulations de dictionnaires
""""""""""""
Écrire une fonction qui échange les clés et les valeurs d'un dictionnaire (ce qui permettra par exemple de transformer un dictionnaire anglais/français en un dictionnaire français/anglais). On suppose qu’il n’y a pas de valeurs en double pour simplifier.
"""   Exo5   """
Exercice 8 : manipulations de fichiers textes
""""""""""""
Écrire un script qui permet de créer et de relire aisément un fichier texte. Votre programme demandera d'abord à l'utilisateur d'entrer le nom du fichier. Ensuite il lui proposera le choix, soit d'enregistrer de nouvelles lignes de texte, soit d'afficher le contenu du fichier. L'utilisateur devra pouvoir entrer ses lignes de texte successives en utilisant simplement la touche <Enter> pour les séparer les unes des autres. Pour terminer les entrées, il lui suffira d'entrer une ligne vide (c'est-à-dire utiliser la touche <Enter> seule).
def   conv_time(s):
Écrire un script qui génère automatiquement un fichier texte contenant les tables de multiplication de 2 à 30 (chacune d'entre elles incluant 20 termes seulement).
            reste   =   s

            annee   =   int(reste   //   (60*60*24*365.25))
Écrire un script qui recopie un fichier texte en triplant tous les espaces entre les mots.
            reste   =   reste   %   (60*60*24*365.25)

            mois   =      int(reste   //   (60*60*24*30.4375))
À partir de deux fichiers préexistants A et B, construisez un fichier C qui contienne alternativement une ligne de A, une ligne de B... et ainsi de suite jusqu'à atteindre la fin de l'un des deux fichiers originaux. Complétez ensuite C avec les éléments restant sur l'autre.
            reste   =   reste   %   (60*60*24*30.4375)

            jour   =   int(reste   //   (60*60*24))
Exercice 9 : quelques notes
            reste   =   reste   %   (60*60*24)

            heure   =   int(reste   //   (60*60))
Écrire un programme permettant d'entrer des notes d'élèves d’élèves sur 20 jusqu’à ce l’utilisateur saisisse une note vide. Construire une liste et à chaque nouvelle entrée, afficher le nombre de notes entrées, la note la plus élevée, la note la plus basse, la moyenne de toutes les notes.
            reste   =   reste   %   (60*60)
Facultatif : utiliser le module pickle pour enregistrer la liste de note et la récupérer si nécessaire. À chaque fois que l’utilisateur commence, lui demander s’il veut continuer une des listes existantes, en créer une nouvelle ou écraser une de celles existantes.
            minute   =   int(reste   //   60)
Exercice 10 : une première base de données
            seconde   =   int(reste   %   60)
Écrire un script qui crée un système de base de données fonctionnant à l'aide d'un dictionnaire, et dans lequel vous mémoriserez les noms d'une série d’individus, leur âge, leur sexe et leur taille. Votre script devra comporter 4 fonctions : la première pour le remplissage du dictionnaire, la seconde pour sa consultation, la troisième pour sa sauvegarde au format texte et la quatrième pour reconstituer le dictionnaire à partir du fichier texte.
            
La fonction de remplissage doit permettre d’ajouter les informations des individus au dictionnaire : le nom de l’individu servira de clé d'accès, et les valeurs seront constituées de tuples (âge, sexe, taille), dans lesquels l'âge sera exprimé en années (donnée de type entier), le sexe au format ‘F’ ou ‘M’ et la taille en mètres (donnée de type réel).
            annee   =   format(annee,",d").replace(",","   ")   
La fonction de consultation doit permettre à l’utilisateur d’obtenir à partir d’un nom le triplet « âge, sexe, taille » correspondant. Le résultat de la requête devra être une ligne de texte bien formatée, telle par exemple : « Nom : Xabi - âge : 25 ans - sexe : M - taille : 1.74 m ».
            
La fonction de sauvegarde doit stocker dans chaque ligne de votre fichier texte un élément du dictionnaire. Elle sera formatée de manière à bien séparer la clé et les différentes valeurs.
            print(f"{s}   secondes   correspondent   à   :",
Au début de chaque utilisation, demander à l’utilisateur ce qu’il souhaite faire (compléter ou consulter un dictionnaire)
                              f"{annee}   années   {mois}   mois   {jour}   jours",
                              f"{heure}   heures   {minute}   minutes   {seconde}   secondes",   sep="\n")

import   sys
from   numpy.random   import   *
s   =   randint(0,sys.maxsize)
conv_time(s)


def   conv_speed(speed):
            kmh   =   round(1.609*speed,2)
            ms   =   round(1609/3600*speed,2)
            print(f"{speed}   miles/h   est   équivalent   à   :",
                              f"   -   {kmh}   km/h",
                              f"   -   {ms}   m/s",   sep="\n")

speed   =   randint(0,300)
conv_speed(speed)




###############################################################################
""""""""""""
"""   Exo6   """
""""""""""""
def   pascal(i,k):
            if   i   <   2   or   k   <   2   or   k   ==   i+1:
                        return   1
            else:
                        return   pascal(i-1,k-1)+pascal(i-1,k)
            
plus_grd_coef   =   lambda   ligne   :   pascal(ligne,ligne//2+1)

list(map(plus_grd_coef,list(range(1,11))))
